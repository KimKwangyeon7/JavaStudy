참고: https://www.slideshare.net/plusjune/ss-46109239

1. Java의 특징
  - 객체지향 프로그래밍 언어
  
  * 추상화: 대상에서 특징만을 뽑아내는 것, 사용자가 구체적인 내용을 생각하지 않아도 사용 가능
  * 객체: 객관적으로 존재하는 실체
  *  
  
  - 기본 자료형 제외 모든 요소들이 객체로 표현됨
  - 클래스, 오브젝트, 캡슐화, 상속, 다형성
  
  * 클래스(class): 추상(abstract), 표현 대상들의 공통적인 특징을 서술한 것
  * 오브젝트(Object): 실체(instance), 클래스의 인스턴스
  
  * 캡슐화(Encapsulation)
    - 외부에서 객체 접근하는데 있어서 정보를 숨기고 객체의 연산을 통해서만 접근이 가능하게 하는 것
    - 데이터 + 데이터에 대한 조작을 묶는 것, 이때 이렇게 관련있는 것들을 묶은 것에 이름을 부여하는 것이 '추상화'
    
  * 상속성(inheritance)
    - 하나의 클래스가 가지고 있는 특징(데이터 + 데이터에 대한 조작)들을 그대로 다른 클래스가 물려 받는 것
  
  * 다형성(polymorphism)
    - 상속성의 계층을 따라서 각각의 클래스에 동일한 이름의 메소드를 사용할 수 있는 것
    - 같은 명령을 각기 다른 오브젝트에 줄 수 있음
  
  - 장점
    - JVM(자바가상머신) 위에서 동작하기 때문에 운영체제에 독립적
    - Garbage Collector를 통한 자동적인 메모리 관리가 가능
  - 단점
      - JVM 위에서 동작하기 때문에 실행 속도가 상대적으로 느림
      - 다중 상속이나 타입에 엄격, 제약이 많음

2. JVM의 역할
  - JVM은 스택 기반으로 동작하며, Java Byte Code를 OS에 맞게 해석해주는 역할
  - 가비지 컬렉션을 통해 자동적인 메모리 관리를 해줌

3. Java의 컴파일 과정
  - 1. 개발자가 .java 파일을 생성
  - 2. build 함
  - 3. java compiler의 javac 명령어를 통해 바이트코드(.class)를 생성
  - 4. Class Loader를 통해 JVM 메모리 내로 로드
  - 5. 실행 엔진을 통해 컴퓨터가 읽을 수 있는 기계어로 해석됨 (각 OS에 맞는 기계어)

4. Java에서 제공하는 윈시 타입들
  - 정수형: byte(1), short(2), int(4), long(8)
  - 실수형: float(4), double(8)
  - 문자형: char(2)
  - 논리형: boolean(1)

5. 오버라이딩(Overriding)과 오버로딩(Overloading)
  - 오버라이딩: 상위 클래스에 있는 메소드를 하위 클래스에서 재정의하는 것
  - 오버로딩: 매개변수의 개수나 타입을 다르게 하여 같은 이름의 메소드를 여러 개 정의하는 것

6. try-with-resources에 대해 설명
  - try-catch-finally의 문제점을 보완하기 위해 나온 개념
  - try(...) 안에 자원 객체를 전달하면, try 블록이 끝나고 자동으로 자원 해제해주는 기능
  - 따로 finally 구문이나 모든 catch 구문에 종료 처리를 하지 않아도 되는 장점 있음

7. 불변 객체 설명 + Java에서 그 예시
  - 불변 객체는 객체 생성 이후 내부의 상태가 변하지 않는 객체
  - Java에서는 필드가 원시 타입인 경우 final 키워드를 통해 불변 객체 만들 수 있음
  - 참조 타입일 경우



  
